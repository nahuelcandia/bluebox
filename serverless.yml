service:
  name: bluebox

custom:
#  vpc:
#    staging:
#      securityGroupIds: []
#      subnetIds: []
#    production:
#      securityGroupIds: []
#      subnetIds: []
  region:
    staging: us-east-1
    production: us-east-1
  dynamodb:
    stages:
      - staging
      - production
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  vpcConfig:
    cidrBlock: '10.0.0.0/16'

    # if createNatGateway is a boolean "true", a NAT Gateway and EIP will be provisioned in each zone
    # if createNatGateway is a number, that number of NAT Gateways will be provisioned
    createNatGateway: true

    # When enabled, the DB subnet will only be accessible from the Application subnet
    # Both the Public and Application subnets will be accessible from 0.0.0.0/0
    createNetworkAcl: true
    createDbSubnet: true
    createParameters: true
    zones:
      - us-east-1a
      - us-east-1b
      - us-east-1c

    # By default, S3 and DynamoDB endpoints will be available within the VPC
    # see https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html
    # for a list of available service endpoints to provision within the VPC
    # (varies per region)
    services:
      - kms
      - secretsmanager
    exportOutputs: false
  associateWaf:
    name: BlueboxWaf
    version: Regional #(optional) Regional | V2
plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-vpc-plugin
  - serverless-associate-waf

provider:
  name: aws
  stage: ${opt:stage, 'staging'}
  region: ${self:custom.region.${opt:stage, self:provider.stage}}
  runtime: nodejs12.x
  timeout: 60
  #vpc: ${self:custom.vpc.${opt:stage, self:provider.stage}}
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  blueboxInboundProxy:
    handler: index.app
    events:
      - http:
          method: 'any'
          path: '/' # Catch all unknown routes and redirect to main handler
          cors: true
      - http:
          method: 'any'
          path: '/{any+}' # Catch all unknown routes and redirect to main handler
          cors: true
resources:
  BlueboxDynamoDbTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: 'CreditCardTokenizerTable'
      AttributeDefinitions: 
        - AttributeName: "Hash_Key"
          AttributeType: "S"
        - AttributeName: "Account_Id"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "Hash_Key"
          KeyType: "HASH"
        - AttributeName: "Account_Id"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: Yes
        SSEType: 'KMS'
  CMKey: 
    Type: AWS::KMS::Key
    Properties: 
      Description: 'Customer managed key to be used for dynamo items encryption'
      Enabled: Yes
      EnableKeyRotation: Yes
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
  KeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${self:service.name}'
      TargetKeyId: !Ref CMKey
Outputs:
  KMSKeyID:
    Description: ARN for CMS Key created
    Value: !GetAtt CMKey.Arn
  LayerVersionArn:
    Description: ARN for the published Layer version
    Value:
      Ref: LambdaLayer
    Export:
      Name:
        Fn::Sub: 'TokenizeData'
  DynamoDBArn:
    Description: ARN for DynamoDB Table
    Value: !GetAtt TokenDatabase.Arn