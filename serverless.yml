service:
  name: bluebox

custom:
  customDomain:
    domainName: 'api.yourdomain.com'
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
#  vpc:
#    staging:
#      securityGroupIds: []
#      subnetIds: []
#    production:
#      securityGroupIds: []
#      subnetIds: []
  region:
    staging: us-east-1
    production: us-east-1
  dynamodb:
    stages:
      - staging
      - production
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  vpcConfig:
    cidrBlock: '10.0.0.0/16'

    # if createNatGateway is a boolean "true", a NAT Gateway and EIP will be provisioned in each zone
    # if createNatGateway is a number, that number of NAT Gateways will be provisioned
    createNatGateway: true

    # When enabled, the DB subnet will only be accessible from the Application subnet
    # Both the Public and Application subnets will be accessible from 0.0.0.0/0
    createNetworkAcl: true
    createDbSubnet: true
    createParameters: true
    zones:
      - us-east-1a
      - us-east-1b
      - us-east-1c

    # By default, S3 and DynamoDB endpoints will be available within the VPC
    # see https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html
    # for a list of available service endpoints to provision within the VPC
    # (varies per region)
    services:
      - kms
      - secretsmanager
    exportOutputs: true
  #associateWaf:
    #name: BlueboxWaf
    #version: Regional #(optional) Regional | V2
plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-vpc-plugin
  #- serverless-associate-waf
  - serverless-domain-manager
  - serverless-dotenv-plugin

provider:
  name: aws
  stage: ${opt:stage, 'staging'}
  region: ${self:custom.region.${opt:stage, self:provider.stage}}
  runtime: nodejs12.x
  timeout: 30
  memorySize: 1769 # equivalent to 1vCPU
  #vpc: ${self:custom.vpc.${opt:stage, self:provider.stage}}
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:CreateTable
        - dynamodb:DescribeTable
        - dynamodb:UpdateTable
        - dynamodb:DescribeTimeToLive
        - dynamodb:UpdateTimeToLive
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - kms:Encrypt
        - kms:Decrypt
        - kms:GenerateDataKey
      Resource: ${env:KMS_CMK_KEYID}

functions:
  blueboxInboundProxy:
    handler: index.app
    events:
      - http:
          method: 'any'
          path: '/' # Catch all unknown routes and redirect to main handler
          cors:
            origin: '*'
            headers: '*'
            allowCredentials: true
      - http:
          method: 'any'
          path: '/{any+}' # Catch all unknown routes and redirect to main handler
          cors:
            origin: '*'
            headers: '*'
            allowCredentials: true